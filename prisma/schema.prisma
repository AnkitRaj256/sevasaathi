// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  username         String
  email            String   @unique
  age              Int?
  password         String
  phone            String?  @unique
  imageURL         String?
  address          String?
  zipcode          String?
  state            String?
  country          String?
  rating           Float    @default(0)
  role             Role     @default(USER)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  verifyCode       String?
  verifyCodeExpiry DateTime?
  isVerified       Boolean  @default(false)

  // Relations
  captains         Captain[]
  admin            Admin?
  bookings         Booking[]
  ratings          Rating[]
  payments         Payment[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Captain {
  id           String   @id @default(uuid())
  userId       String   @unique
  serviceId    String?
  availability Boolean  @default(false)
  experience   Int
  hourlyRate   Float
  location     String
  rating       Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  service      Service?  @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  bookings     Booking[]
  ratings      Rating[]
  locationData Location?
  messages     Message[]
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique

  // Permissions
  permissions Json @default("{}")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Service {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  captains Captain[]
  bookings Booking[]
}

model Booking {
  id          String        @id @default(uuid())
  userId      String
  CaptainId   String?
  serviceId   String?
  status      BookingStatus @default(PENDING)
  amount      Float
  paymentId   String?
  scheduledAt DateTime
  completedAt DateTime?
  createdAt   DateTime      @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Captain Captain? @relation(fields: [CaptainId], references: [id], onDelete: SetNull)
  service Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  payment Payment?
}

model Payment {
  id            String        @id @default(uuid())
  userId        String
  bookingId     String        @unique
  amount        Float
  status        PaymentStatus @default(PENDING)
  transactionId String        @unique
  createdAt     DateTime      @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Rating {
  id        String   @id @default(uuid())
  userId    String
  CaptainId String
  rating    Float
  review    String?
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Captain Captain @relation(fields: [CaptainId], references: [id], onDelete: Cascade)
}

model Location {
  id        String   @id @default(uuid())
  CaptainId String   @unique
  latitude  Float
  longitude Float
  updatedAt DateTime @updatedAt

  // Relations
  Captain Captain @relation(fields: [CaptainId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  CaptainId  String?
  content    String
  createdAt  DateTime @default(now())

  // Relations
  sender   User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  Captain  Captain? @relation(fields: [CaptainId], references: [id], onDelete: SetNull)
}

enum Role {
  USER
  CAPTAIN
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
